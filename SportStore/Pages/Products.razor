@page "/admin/products"
@page "/admin"
@inherits OwningComponentBase<IStoreRepository>

<table class="table-sm table-stipped table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>Название</th>
            <th>Категория</th>
            <th>Стоимость</th>
        </tr>
    </thead>
    <tbody>
        @if(ProductData?.Count() > 0)
        {
            @foreach(Product p in ProductData)
            {
                <tr>
                    <td>@p.ProductID</td>
                    <td>@p.Name</td>
                    <td>@p.Category</td>
                    <td>@p.Price</td>

                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(p.ProductID)">
                            Просмотр
                        </NavLink>
                        <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(p.ProductID)">
                            Редактировать
                        </NavLink>
                        <button class="btn btn-danger btn-sm" @onclick="(e => DeleteProduct(p))">Удалить</button>
                    </td>
                </tr>
            }
        } else {
            <tr>
                <td colspan="5" class="text-center">Продукты отсутствуют</td>
            </tr>
        }
    </tbody>
</table>

<NavLink class="btn btn-primary mt-2" href="/admin/products/create">Добавить</NavLink>

@code {
    public IStoreRepository Repository => Service;

    public IEnumerable<Product> ProductData { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        ProductData = await Repository.Products.ToListAsync();
    }

    public async Task DeleteProduct(Product p) {
        Repository.DeleteProduct(p);
        await UpdateData();
    }

    public string GetDetailsUrl(long id) => $"/admin/products/details/{id}";
    public string GetEditUrl(long id) => $"/admin/products/edit/{id}";
}